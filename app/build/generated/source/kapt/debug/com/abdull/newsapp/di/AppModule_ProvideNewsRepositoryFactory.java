// Generated by Dagger (https://dagger.dev).
package com.abdull.newsapp.di;

import com.abdull.newsapp.datasource.local.ArticleDao;
import com.abdull.newsapp.datasource.remote.NewsApi;
import com.abdull.newsapp.repository.abstraction.NewsRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideNewsRepositoryFactory implements Factory<NewsRepository> {
  private final Provider<ArticleDao> dbProvider;

  private final Provider<NewsApi> newsApiProvider;

  public AppModule_ProvideNewsRepositoryFactory(Provider<ArticleDao> dbProvider,
      Provider<NewsApi> newsApiProvider) {
    this.dbProvider = dbProvider;
    this.newsApiProvider = newsApiProvider;
  }

  @Override
  public NewsRepository get() {
    return provideNewsRepository(dbProvider.get(), newsApiProvider.get());
  }

  public static AppModule_ProvideNewsRepositoryFactory create(Provider<ArticleDao> dbProvider,
      Provider<NewsApi> newsApiProvider) {
    return new AppModule_ProvideNewsRepositoryFactory(dbProvider, newsApiProvider);
  }

  public static NewsRepository provideNewsRepository(ArticleDao db, NewsApi newsApi) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideNewsRepository(db, newsApi));
  }
}
